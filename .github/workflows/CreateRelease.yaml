name: Create release

on:
  workflow_dispatch:
    inputs:
      appVersion:
        description: App version to promote to release (default is latest)
        required: false
        default: 'latest'
      name:
        description: Name of this release
        required: true
        default: ''
      tag:
        description: Tag of this release
        required: true
        default: ''
      draft:
        description: Draft (Y/N)
        required: false
        default: 'N'
      prerelease:
        description: Prerelease (Y/N)
        required: false
        default: 'N'

concurrency: release

defaults:
  run:
    shell: PowerShell

jobs:
  Initialization:
    runs-on: [ windows-latest ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
    steps:
      - id: init
        uses: freddydk/AL-Go-Actions/WorkflowInitialize@main
        with:
          eventId: "DO0094"

  CreateRelease:
    runs-on: [ windows-latest ]
    needs: [ Initialization ]
    outputs:
      artifacts: ${{ steps.analyzeartifacts.outputs.artifacts }}
      upload_url: ${{ steps.createrelease.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read settings
        uses: freddydk/AL-Go-Actions/ReadSettings@main
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          get: TemplateUrl

      - name: Check for updates to AL-Go system files
        uses: freddydk/AL-Go-Actions/CheckForUpdates@main
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          templateUrl: ${{ env.TemplateUrl }}

      - name: Analyze Artifacts
        id: analyzeartifacts
        run: |
          Write-Host "Analyzing artifacts"
          $appVersion = '${{ github.event.inputs.appVersion }}'
          $headers = @{ 
              "Authorization" = "token ${{ github.token }}"
              "Accept"        = "application/json"
          }
          $allArtifacts = Invoke-WebRequest -UseBasicParsing -Headers $headers -Uri "$($ENV:GITHUB_API_URL)/repos/$($ENV:GITHUB_REPOSITORY)/actions/artifacts" | ConvertFrom-Json
          $artifactsVersion = $appVersion
          if ($appVersion -eq "latest") {
            $artifact = $allArtifacts.artifacts | Where-Object { $_.name -like "*Apps-*" } | Select-Object -First 1
            $artifactsVersion = $artifact.name.SubString($artifact.name.IndexOf('Apps-')+5)
          }
          $include = @()
          $allArtifacts.artifacts | Where-Object { $_.name -like "*Apps-$($artifactsVersion)" } | ForEach-Object {
            $include += $( [ordered]@{ "name" = $_.name; "url" = $_.archive_download_url } )
          }
          if ($include.Count -eq 0) {
            Write-Host "::Error::No artifacts found"
            exit 1
          }
          $artifacts = @{ "include" = $include }
          $artifactsJson = $artifacts | ConvertTo-Json -compress
          Write-Host "::set-output name=artifacts::$artifactsJson"
          Write-Host "set-output name=artifacts::$artifactsJson"

      - name: Prepare release notes
        id: createreleasenotes
        uses: freddydk/AL-Go-Actions/CreateReleaseNotes@main
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          tag_name: '${{github.event.inputs.tag}}'

      - name: Create release
        uses: actions/create-release@v1
        id: createrelease
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: ${{ github.event.inputs.draft=='Y' }}
          prerelease: ${{ github.event.inputs.prerelease=='Y' }}
          release_name: '${{ github.event.inputs.name }}'
          tag_name: '${{ github.event.inputs.tag }}'
          body: ${{ steps.createreleasenotes.outputs.releaseNotes }}

  UploadArtifacts:
    runs-on: [ windows-latest ] 
    needs: [ CreateRelease ]
    strategy:
      matrix: ${{ fromJson(needs.CreateRelease.outputs.artifacts) }}
      fail-fast: true
    steps:
      - name: Download artifact
        run: |
          Write-Host "Downloading artifact ${{ matrix.name}}"
          $headers = @{ 
              "Authorization" = "token ${{ github.token }}"
              "Accept"        = "application/vnd.github.v3+json"
          }
          Invoke-WebRequest -UseBasicParsing -Headers $headers -Uri '${{ matrix.url }}' -OutFile '${{ matrix.name }}.zip'
          
      - name: Upload release artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.createrelease.outputs.upload_url }}
          asset_path: '${{ matrix.name }}.zip'
          asset_name: '${{ matrix.name }}.zip'
          asset_content_type: application/zip

  PostProcess:
    if: always()
    runs-on: [ windows-latest ]
    needs: [ Initialization, CreateRelease, UploadArtifacts ]
    steps:
      - name: Finalizing the workflow
        id: PostProcess
        uses: freddydk/AL-Go-Actions/WorkflowPostProcess@main
        with:
          eventId: "DO0094"
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}

