name: Publish To Environment

on:
  workflow_dispatch:
    inputs:
      appVersion:
        description: App version to deploy (current, prerelease, draft, latest or version number)
        required: false
        default: 'current'
      environmentName:
        description: Environment to receive the new version (* for all)
        required: false
        default: '*'

defaults:
  run:
    shell: PowerShell

jobs:
  Initialization:
    runs-on: [ windows-latest ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
    steps:
      - id: init
        uses: freddydk/AL-Go-Actions/WorkflowInitialize@main
        with:
          eventId: "DO0097"

  Analyze:
    runs-on: [ windows-latest ]
    needs: [ Initialization ]
    outputs:
      environments: ${{ steps.Environments.outputs.environments }}
      environmentCount: ${{ steps.Environments.outputs.environmentCount }}
    steps:
      - name: Environments
        id: Environments
        run: |
          $environmentName = '${{ github.event.inputs.environmentName }}'
          $headers = @{ 
            "Authorization" = "token ${{ github.token }}"
            "Accept"        = "application/vnd.github.v3+json"
          }
          $url = "$($ENV:GITHUB_API_URL)/repos/$($ENV:GITHUB_REPOSITORY)/environments"
          $environments = @((Invoke-WebRequest -UseBasicParsing -Headers $headers -Uri $url | ConvertFrom-Json).environments | Where-Object { $_.Name -like $environmentName -or $_.Name -like "$environmentName (Production)" } | ForEach-Object { $_.Name })
          if ($environments.Count -eq 1) {
            $environmentsJSon = "[$($environments | ConvertTo-Json -compress)]"
          }
          else {
            $environmentsJSon = $environments | ConvertTo-Json -compress
          }
          Write-Host "::set-output name=environments::$environmentsJson"
          Write-Host "::set-output name=environmentCount::$($environments.Count)"
          Write-Host "set-output name=environments::$environmentsJson"
          Write-Host "set-output name=environmentCount::$($environments.Count)"
        
  Deploy:
    runs-on: [ windows-latest ] 
    needs: [ Analyze ]
    if: ${{ needs.Analyze.outputs.environmentCount > 0 }}
    strategy:
      matrix:
        environment: ${{ fromJson(needs.Analyze.outputs.environments) }}
      fail-fast: false
    name: Deploy to ${{ matrix.environment }}
    environment:
      name: ${{ matrix.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: EnvName
        id: envName
        run: |
          $envName = '${{ matrix.environment }}'.split(' ')[0]
          Write-Host "::set-output name=envName::$envName"

      - name: Read settings
        uses: freddydk/AL-Go-Actions/ReadSettings@main

      - name: Read secrets
        uses: freddydk/AL-Go-Actions/ReadSecrets@main
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          settingsJson: ${{ env.Settings }}
          secrets: '${{ steps.envName.outputs.envName }}-AuthContext,AuthContext'

      - name: AuthContext
        id: authContext
        run: |
          $authContext = [System.Environment]::GetEnvironmentVariable('${{ steps.envName.outputs.envName }}-AuthContext')
          if ($authContext) {
            Write-Host "Using ${{ steps.envName.outputs.envName }}-AuthContext secret"
          }
          else {
            $authContext = [System.Environment]::GetEnvironmentVariable('AuthContext')
            if ($authContext) {
              Write-Host "Using AuthContext secret"
            }
            else {
              Write-Host "::Error::No AuthContext provided"
              exit 1
            }
          }
          Write-Host "::set-output name=authContext::$authContext"
          Write-Host "set-output name=authContext::$authContext"

      - name: Deploy
        uses: freddydk/AL-Go-Actions/Deploy@main
        env:
          authContext: '${{ steps.authContext.outputs.authContext }}'
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          type: 'Publish'
          projects: '${{ secrets.Projects }}'
          environmentName: ${{ matrix.environment }}
          artifacts: ${{ github.event.inputs.appVersion }}

  PostProcess:
    if: always()
    runs-on: [ windows-latest ]
    needs: [ Initialization, Analyze, Deploy ]
    steps:
      - name: Finalizing the workflow
        id: PostProcess
        uses: freddydk/AL-Go-Actions/WorkflowPostProcess@main
        with:
          eventId: "DO0097"
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}

